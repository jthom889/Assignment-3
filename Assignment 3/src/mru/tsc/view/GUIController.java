package mru.tsc.view;

import javafx.fxml.FXML;

import javafx.scene.control.Button;

import javafx.scene.control.ToggleGroup;
import mru.tsc.controller.StoreMenu;
import mru.tsc.exceptions.MinMaxException;
import mru.tsc.exceptions.PriceException;
import mru.tsc.model.Toys;
import javafx.scene.control.TextField;

import java.io.IOException;
import java.util.ArrayList;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.control.TextArea;

import javafx.scene.control.RadioButton;

import javafx.scene.control.ChoiceBox;

public class GUIController {
	ObservableList<String> CategoryList = FXCollections.observableArrayList("Animal", "Board Game", "Figure", "Puzzle");
	@FXML
	private RadioButton readSerialNo;
	@FXML
	private ToggleGroup Search;
	@FXML
	private RadioButton readName;
	@FXML
	private RadioButton readType;
	@FXML
	private TextField SNText;
	@FXML
	private TextField typeText;
	@FXML
	private TextField nameText;
	@FXML
	private Button Clearbtn;
	@FXML
	private Button Searchbtn;
	@FXML
	public TextArea searchOutput;
	@FXML
	private TextField addSN;
	@FXML
	private ChoiceBox<String> category;
	@FXML
	private String search = null;
	@FXML
	private TextField addName;
	@FXML
	private TextField addBrand;
	@FXML
	private TextField addPrice;
	@FXML
	private TextField addCount;
	@FXML
	private TextField addAge;
	@FXML
	private TextField puzzleType;
	@FXML
	private TextField figClass;
	@FXML
	private TextField bgMin;
	@FXML
	private TextField bgDesign;
	@FXML
	private TextField bgMax;
	@FXML
	private TextField animalSize;
	@FXML
	private TextField animalMat;
	@FXML
	private Button addSave;
	@FXML
	private Label addError;
	@FXML
	private TextArea displayArea;
	@FXML
	private TextField rtSN;
	@FXML
	private Button removeToy;
	@FXML
	private TextArea rtList;
	
	StoreMenu toyItems;
	ArrayList<Toys> toys = new ArrayList<>();
	
	public GUIController() throws Exception {
		toyItems = new StoreMenu();
		
	}
	
	public void initialize() {
		category.setValue("");
		category.setItems(CategoryList);
		SNText.setEditable(false);
		nameText.setEditable(false);
		typeText.setEditable(false);
		Searchbtn.setDisable(true);
		
		
	}

	// Event Listener on RadioButton[#readSerialNo].onAction
	@FXML
	public void EditSearchType(ActionEvent event) {
		// TODO Autogenerated
		if (readSerialNo.isSelected()) {
			search = "SN";
			SNText.setEditable(true);
			nameText.setEditable(false);
			typeText.setEditable(false);
		}

		else if (readName.isSelected()) {
			search = "Name";
			SNText.setEditable(false);
			nameText.setEditable(true);
			typeText.setEditable(false);

		} else if (readType.isSelected()) {
			search = "Type";
			SNText.setEditable(false);
			nameText.setEditable(false);
			typeText.setEditable(true);

		}

		SNText.setText("");
		nameText.setText("");
		typeText.setText("");
		Searchbtn.setDisable(false);
	}
	
	// Event Listener on Button[#Clear].onAction
	@FXML
	public void Resetfields(ActionEvent event) {
		// TODO Autogenerated
		SNText.setText("");
		nameText.setText("");
		typeText.setText("");
		searchOutput.setText("");
		Search.selectToggle(null);
	}
	
	// Event Listener on Button[#Search].onAction
	@FXML
	public void SearchToy(ActionEvent event) throws Exception {
		// TODO Autogenerated
		if (search.equalsIgnoreCase("SN")) {

			if (toyItems.repeatedSerialNo(SNText.getText()) == true) {
				Toys t = toyItems.searchSerialNo(SNText.getText());
				searchOutput.setText(t.toString());
			} else {
				searchOutput.setText("A toy with that SN could not be located");
			}
		} else if (search.equalsIgnoreCase("Name")) {
			if (nameText.getText().isEmpty()) {
				searchOutput.setText("A toy of that name could not be located");
			}else {
				
				searchOutput.setText(toyItems.searchByName(nameText.getText()));
			}
			
		} else if (search.equalsIgnoreCase("Type")) {
			if (typeText.getText().isEmpty()) {
				searchOutput.setText("Enter (A)nimal (B)oardGame (F)igure or (P)uzzle");
			} else {
				searchOutput.setText(toyItems.searchByType(typeText.getText()));
			}
		}
	}
	
	public void AddToy() throws IOException {
		if (category.getValue().equalsIgnoreCase("Figure")) {
			toyItems.addFigure(addSN.getText(), addName.getText(), addBrand.getText(),
					Double.parseDouble(addPrice.getText()), Integer.parseInt(addCount.getText()),
					Integer.parseInt(addAge.getText()), figClass.getText());
		}
		if (category.getValue().equalsIgnoreCase("Animal")) {
			toyItems.addAnimal(addSN.getText(), addName.getText(), addBrand.getText(),
					Double.parseDouble(addPrice.getText()), Integer.parseInt(addCount.getText()),
					Integer.parseInt(addAge.getText()), animalMat.getText(), animalSize.getText());
		}
		if (category.getValue().equalsIgnoreCase("Puzzle")) {
			toyItems.addPuzzle(addSN.getText(), addName.getText(), addBrand.getText(),
					Double.parseDouble(addPrice.getText()), Integer.parseInt(addCount.getText()),
					Integer.parseInt(addAge.getText()), puzzleType.getText());
		}
		if (category.getValue().equalsIgnoreCase("Board Game")) {
			toyItems.addBoardGame(addSN.getText(), addName.getText(), addBrand.getText(),
					Double.parseDouble(addPrice.getText()), Integer.parseInt(addCount.getText()),
					Integer.parseInt(addAge.getText()),
					bgMin.getText() + "-" + bgMax.getText(), bgDesign.getText());
		}
		toyItems.exit();
	}
	
	// Event Listener on Button[#removeToy].onAction
		@FXML
		public void RemoveToy(ActionEvent event) throws Exception {
			// TODO Autogenerated
			if (toyItems.repeatedSerialNo(rtSN.getText()) == true) {
				Toys t = toyItems.searchSerialNo(rtSN.getText());
				
				rtList.setText(t.toString() + "\n" + "Toy removed!");
				
				toyItems.RemoveToy(rtSN.getText());
				
				toyItems.exit();
			} else {
				
				rtList.setText("No Serial Number found");
			}
		}
	
	@FXML
	public void selectToyType(ActionEvent event) {
		if (category.getValue().equalsIgnoreCase("Figure")) {
			animalMat.setEditable(false);
			animalSize.setEditable(false);
			puzzleType.setEditable(false);
			bgMin.setEditable(false);
			bgMax.setEditable(false);
			bgDesign.setEditable(false);
			figClass.setEditable(true);
		}
		if (category.getValue().equalsIgnoreCase("Animal")) {
			animalMat.setEditable(true);
			animalSize.setEditable(true);
			puzzleType.setEditable(false);
			bgMin.setEditable(false);
			bgMax.setEditable(false);
			bgDesign.setEditable(false);
			figClass.setEditable(false);
		}
		if (category.getValue().equalsIgnoreCase("Puzzle")) {
			animalMat.setEditable(false);
			animalSize.setEditable(false);
			puzzleType.setEditable(true);
			bgMin.setEditable(false);
			bgMax.setEditable(false);
			bgDesign.setEditable(false);
			figClass.setEditable(false);
		}
		if (category.getValue().equalsIgnoreCase("Board Game")) {
			animalMat.setEditable(false);
			animalSize.setEditable(false);
			puzzleType.setEditable(false);
			bgMin.setEditable(true);
			bgMax.setEditable(true);
			bgDesign.setEditable(true);
			figClass.setEditable(false);
		}
		ResetAddToyPage();
	}
	
	public void ResetAddToyPage() {
		animalMat.setText("");
		animalSize.setText("");
		puzzleType.setText("");
		bgMin.setText("");
		bgMax.setText("");
		bgDesign.setText("");
		figClass.setText("");
	}
	
	@FXML
	public void errorCheck (ActionEvent event) throws Exception {
		// TODO Autogenerated
		boolean errorCheck = true;
		String errors = "The following Toy cannot be added:";
		char firstSNNo = 'f';
		
		if (addName.getText().isEmpty()) {
			errors = errors + "\n" + "Please enter a Name";
			errorCheck = false;
		}
		
		if (addBrand.getText().isEmpty()) {
			errors = errors + "\n" + "Please enter a Brand";
			errorCheck = false;
		}
		
		if (addSN.getText().isEmpty()) {
			errors = errors + "\n" + "Please enter a SN";
			errorCheck = false;
		}
		
		else {
			
			firstSNNo = addSN.getText().charAt(0);
			if (toyItems.repeatedSerialNo(addSN.getText()) == true) {
				errors = errors + "\n" + "A toy with that SN already exists";
				errorCheck = false;
			}

			
			try {
				Long.parseLong(addSN.getText());
			} catch (NumberFormatException e) {
				errors = errors + "\n" + "Your SN can only contain numbers";
				errorCheck = false;
			}
			
			if (addSN.getText().length() != 10) {
				errors = errors + "\n" + "Your SN must be ten digits long";
				errorCheck = false;
			}
		}
		
		if (addPrice.getText().isEmpty()) {
			errors = errors + "\n" + "Please enter a Price";
			errorCheck = false;
		} else {
			try {
				Double.parseDouble(addPrice.getText());
				checkPrice(Double.parseDouble(addPrice.getText()));
			} catch (PriceException e) {
				errors = errors + "\n" + "You must enter a valid price";
				errorCheck = false;
			}
		}

		

		if (addCount.getText().isEmpty()) {
			errors = errors + "\n" + "Please enter an available amount";
			errorCheck = false;
		} else {
			try {
				Integer.parseInt(addCount.getText());
				checkPrice(Double.parseDouble(addCount.getText()));
			} catch (NumberFormatException | PriceException e) {
				errors = errors + "\n" + "You must enter a valid available amount";
				errorCheck = false;
			}
		}

		
		try {
			Integer.parseInt(addAge.getText());
		} catch (NumberFormatException e) {
			errors = errors + "\n" + "You must enter a valid appropriate age";
			errorCheck = false;
		}

	
		if (category.getValue().equalsIgnoreCase("Figure")) {
			if (validFigureInput(firstSNNo).equalsIgnoreCase("")) {

			} else {
				errorCheck = false;
				errors = errors + validFigureInput(firstSNNo);
			}
		}
		
		if (category.getValue().equalsIgnoreCase("Animal")) {
			if (validAnimalInput(firstSNNo).equalsIgnoreCase("")) {

			} else {
				errorCheck = false;
				errors = errors + validAnimalInput(firstSNNo);
			}
		}
		
		if (category.getValue().equalsIgnoreCase("Puzzle")) {
			if (validPuzzleInput(firstSNNo).equalsIgnoreCase("")) {

			} else {
				errorCheck = false;
				errors = errors + validPuzzleInput(firstSNNo);
			}
		}
		
		if (category.getValue().equalsIgnoreCase("Board Game")) {
			if (bgMax.getText().isEmpty() || bgMin.getText().isEmpty()) {
				errors = errors + "\n" + "Please enter a minimum and maximum players";
				errorCheck = false;
			} else {
				try {
					checkPlayers(Integer.parseInt(bgMin.getText()),
							Integer.parseInt(bgMax.getText()));
				} catch (MinMaxException | NumberFormatException e) {
					errors = errors + "\n" + "Your minimum players cannot be more than your maximum players";
					errorCheck = false;
				}

			}
			if (validBoardGameInput(firstSNNo).equalsIgnoreCase("")) {

			} else {
				errorCheck = false;
				errors = errors + validBoardGameInput(firstSNNo);
			}
		}
		if (errorCheck == false) {
			displayArea.setText(errors);
		}
		if (errorCheck == true) {
			displayArea.setText("Toy has been Added");
			AddToy();
		}
	}
	
	public String validFigureInput(char firstSNNo) {
		String fExtraerror = "";
		if (firstSNNo != '0' && firstSNNo != '1') {
			fExtraerror = fExtraerror + "\n" + "The first digit of a Figures SN must be a 0 or a 1";
		}
		if (figClass.getText().isEmpty()) {
			fExtraerror = fExtraerror + "\n" + "Please enter a classification";
		} else {
			char c = figClass.getText().toUpperCase().charAt(0);
			if (c != 'A' && c != 'D' && c != 'H') {
				fExtraerror = fExtraerror + "\n"
						+ "The classification of a Figure must be the folowwing (A)ction (D)oll or (H)istoric";
			}
			if (c != 'a' && c != 'd' && c != 'h') {
				fExtraerror = fExtraerror + "\n"
						+ "The classification of a Figure must be the folowwing (A)ction (D)oll or (H)istoric";
			}
		}
		return fExtraerror;
	}

	public String validAnimalInput(char firstSNNo) {
		String aExtraerror = "";
		if (firstSNNo != '2' && firstSNNo != '3') {
			aExtraerror = aExtraerror + "\n" + "The first digit of a Animals SN must be a 2 or a 3";
		}
		if (animalSize.getText().isEmpty()) {
			aExtraerror = aExtraerror + "\n" + "Please enter a size";
		} else {
			char c = animalSize.getText().toUpperCase().charAt(0);
			if (c != 'S' && c != 'M' && c != 'L') {
				aExtraerror = aExtraerror + "\n" + "The size of a Animal must be either (S)mall (M)edium or (L)arge";
			}
		}
		if (animalMat.getText().isEmpty()) {
			aExtraerror = aExtraerror + "\n" + "Please enter a material";
		}
		return aExtraerror;
	}

	public String validPuzzleInput(char firstSNNo) {
		String pErrorfound = "";
		if (firstSNNo != '4' && firstSNNo != '5' && firstSNNo != '6') {
			pErrorfound = pErrorfound + "\n" + "The first digit of a Puzzles SN must be a 4, 5, or 6";

		}
		if (puzzleType.getText().isEmpty()) {
			pErrorfound = pErrorfound + "\n" + "Please enter a Puzzle type";
		} else {
			char c = puzzleType.getText().toUpperCase().charAt(0);
			if (c != 'C' && c != 'M' && c != 'L' && c != 'T'
					&& c != 'R') {
				pErrorfound = pErrorfound + "\n"
						+ "The puzzle type must be either (M)echanical (C)ryptic (L)ogic (T)rivia or (R)iddle";
			}
		}
		return pErrorfound;
	}
	
	public String validBoardGameInput(char firstSNNo) {
		String bgErrorfound = "";
		if (firstSNNo != '7' && firstSNNo != '8' && firstSNNo != '9') {
			bgErrorfound = bgErrorfound + "\n" + "The first digit the SN must be a 7, 8, or 9";

		}
		if (bgDesign.getText().isEmpty()) {
			bgErrorfound = bgErrorfound + "\n" + "Enter the game's designers";
		}

		return bgErrorfound;
	}

	public double checkPrice(double price) throws PriceException {
		if (price < 0) {
			throw new PriceException();
		}
		return price;
	}

	public void checkPlayers(int minPlys, int maxPlys) throws MinMaxException {
		if (maxPlys < minPlys) {
			throw new MinMaxException();
		}
	}
}